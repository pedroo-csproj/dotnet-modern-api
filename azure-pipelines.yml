trigger:
  - develop

variables:
  - group: 'production'

pool:
  vmImage: 'ubuntu-22.04'

stages:
  - stage: 'test_services'
    displayName: 'Test Services'
    jobs:
    - job: 'dotnet_modern_api'
      displayName: '.NET Modern API'
      continueOnError: false
      steps:
        - task: DotNetCoreCLI@2
          displayName: 'Test'
          inputs:
            command: 'test'
            projects: '**/*.csproj'
            arguments: '-c Test'
            workingDirectory: '$(System.DefaultWorkingDirectory)/src/tests'

  - stage: 'update_infrastructure'
    displayName: 'Update Infrastructure'
    jobs:
    - job: 'run_terraform'
      displayName: 'Run Terraform'
      continueOnError: false
      steps:
      - task: replacetokens@5
        displayName: 'Replace Variables'
        inputs:
          rootDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
          targetFiles: 'terraform.tfvars'
          encoding: 'auto'
          tokenPattern: 'default'
          writeBOM: true
          actionOnMissing: 'fail'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true

      - task: TerraformTaskV4@4
        displayName: 'Init Terraform'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
          backendServiceArm: '$(Subscription)'
          backendAzureRmResourceGroupName: '$(CoreResourceGroupName)'
          backendAzureRmStorageAccountName: '$(CoreResourceGroupStorageAccountName)'
          backendAzureRmContainerName: '$(CoreResourceGroupStorageAccountContainerName)'
          backendAzureRmKey: '$(CoreResourceGroupStorageAccountKey)'

      - task: TerraformTaskV4@4
        displayName: 'Apply Terraform'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
          environmentServiceNameAzureRM: '$(Subscription)'

  - stage: 'build_services'
    displayName: 'Build Services'
    jobs:
      - job: 'dotnet_modern_api'
        displayName: '.NET Modern API'
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'crdnma'
            command: 'login'

        - task: Docker@2
          inputs:
            containerRegistry: '$(ContainerRegistryName)'
            repository: '$(ContainerRepositoryName)'
            command: 'buildAndPush'
            Dockerfile: '$(System.DefaultWorkingDirectory)/src/DotNETModernAPI.Presentation/Dockerfile'
            buildContext: '$(System.DefaultWorkingDirectory)/src'
            tags: '$(Build.BuildId)'

        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: '$(Subscription)'
            appType: 'webAppContainer'
            WebAppName: '$(LinuxWebAppName)'
            DockerNamespace: '$(ContainerRegistryName).azurecr.io'
            DockerRepository: '$(ContainerRepositoryName)'
            DockerImageTag: '$(Build.BuildId)'
