trigger:
  - develop

pool:
  vmImage: 'ubuntu-22.04'

variables:
  - group: 'production'

stages:
  - stage: 'create_or_update_infrastructure'
    displayName: 'Create or Update Infrastructure'
    jobs:
    - job: 'run_terraform'
      displayName: 'Run Terraform'
      continueOnError: false
      steps:
      - task: replacetokens@5
        displayName: 'Replace Variables'
        inputs:
          rootDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
          targetFiles: 'terraform.tfvars'
          encoding: 'auto'
          tokenPattern: 'default'
          writeBOM: true
          actionOnMissing: 'fail'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true

      - task: TerraformTaskV4@4
        displayName: 'Init Terraform'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
          backendServiceArm: 'Pay-As-You-Go(dc78a565-ae43-4a3f-ba70-2248f89c3674)'
          backendAzureRmResourceGroupName: 'rg-dnma-prod'
          backendAzureRmStorageAccountName: 'sadnmaprod'
          backendAzureRmContainerName: 'terraform'
          backendAzureRmKey: 'fCdkNeZYxaeinXzUxxYY2ZaD/7lXSMIEW/WMFHdXPdv7rEbiTsCqQtS48bFTAiOM8RuBVMbUDdP7+ASttfn2hA=='

      - task: TerraformTaskV4@4
        displayName: 'Apply Terraform'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
          environmentServiceNameAzureRM: 'Pay-As-You-Go(dc78a565-ae43-4a3f-ba70-2248f89c3674)'

  - stage: 'build_services'
    displayName: 'Build Services'
    jobs:
      - job: 'dotnet_modern_api'
        displayName: '.NET Modern API'
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'crdnma'
            repository: 'dnma'
            command: 'buildAndPush'
            Dockerfile: '$(System.DefaultWorkingDirectory)/src/DotNETModernAPI.Presentation/Dockerfile'
            buildContext: '$(System.DefaultWorkingDirectory)/src'
            tags: '$(Build.BuildId)'
